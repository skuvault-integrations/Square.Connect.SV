/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Sets the Day of the week and hour of the day that a business starts a  work week. Used for the calculation of overtime pay.
    /// </summary>
    [DataContract]
    public partial class WorkweekConfig :  IEquatable<WorkweekConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkweekConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkweekConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkweekConfig" /> class.
        /// </summary>
        /// <param name="Id">UUID for this object.</param>
        /// <param name="StartOfWeek">The day of the week on which a business week cuts over for compensation purposes. See [Weekday](#type-weekday) for possible values (required).</param>
        /// <param name="StartOfDayLocalTime">The local time at which a business week cuts over. Represented as a string in &#x60;HH:MM&#x60; format (&#x60;HH:MM:SS&#x60; is also accepted, but seconds are truncated). (required).</param>
        /// <param name="Version">Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If not provided, Square executes a blind write; potentially overwriting data from another write..</param>
        /// <param name="CreatedAt">A read-only timestamp in RFC 3339 format; presented in UTC.</param>
        /// <param name="UpdatedAt">A read-only timestamp in RFC 3339 format; presented in UTC.</param>
        public WorkweekConfig(string Id = default(string), string StartOfWeek = default(string), string StartOfDayLocalTime = default(string), int? Version = default(int?), string CreatedAt = default(string), string UpdatedAt = default(string))
        {
            // to ensure "StartOfWeek" is required (not null)
            if (StartOfWeek == null)
            {
                throw new InvalidDataException("StartOfWeek is a required property for WorkweekConfig and cannot be null");
            }
            else
            {
                this.StartOfWeek = StartOfWeek;
            }
            // to ensure "StartOfDayLocalTime" is required (not null)
            if (StartOfDayLocalTime == null)
            {
                throw new InvalidDataException("StartOfDayLocalTime is a required property for WorkweekConfig and cannot be null");
            }
            else
            {
                this.StartOfDayLocalTime = StartOfDayLocalTime;
            }
            this.Id = Id;
            this.Version = Version;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// UUID for this object
        /// </summary>
        /// <value>UUID for this object</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The day of the week on which a business week cuts over for compensation purposes. See [Weekday](#type-weekday) for possible values
        /// </summary>
        /// <value>The day of the week on which a business week cuts over for compensation purposes. See [Weekday](#type-weekday) for possible values</value>
        [DataMember(Name="start_of_week", EmitDefaultValue=false)]
        public string StartOfWeek { get; set; }
        /// <summary>
        /// The local time at which a business week cuts over. Represented as a string in &#x60;HH:MM&#x60; format (&#x60;HH:MM:SS&#x60; is also accepted, but seconds are truncated).
        /// </summary>
        /// <value>The local time at which a business week cuts over. Represented as a string in &#x60;HH:MM&#x60; format (&#x60;HH:MM:SS&#x60; is also accepted, but seconds are truncated).</value>
        [DataMember(Name="start_of_day_local_time", EmitDefaultValue=false)]
        public string StartOfDayLocalTime { get; set; }
        /// <summary>
        /// Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If not provided, Square executes a blind write; potentially overwriting data from another write.
        /// </summary>
        /// <value>Used for resolving concurrency issues; request will fail if version provided does not match server version at time of request. If not provided, Square executes a blind write; potentially overwriting data from another write.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int? Version { get; set; }
        /// <summary>
        /// A read-only timestamp in RFC 3339 format; presented in UTC
        /// </summary>
        /// <value>A read-only timestamp in RFC 3339 format; presented in UTC</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// A read-only timestamp in RFC 3339 format; presented in UTC
        /// </summary>
        /// <value>A read-only timestamp in RFC 3339 format; presented in UTC</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkweekConfig {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartOfWeek: ").Append(StartOfWeek).Append("\n");
            sb.Append("  StartOfDayLocalTime: ").Append(StartOfDayLocalTime).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WorkweekConfig);
        }

        /// <summary>
        /// Returns true if WorkweekConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkweekConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkweekConfig other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.StartOfWeek == other.StartOfWeek ||
                    this.StartOfWeek != null &&
                    this.StartOfWeek.Equals(other.StartOfWeek)
                ) && 
                (
                    this.StartOfDayLocalTime == other.StartOfDayLocalTime ||
                    this.StartOfDayLocalTime != null &&
                    this.StartOfDayLocalTime.Equals(other.StartOfDayLocalTime)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.StartOfWeek != null)
                    hash = hash * 59 + this.StartOfWeek.GetHashCode();
                if (this.StartOfDayLocalTime != null)
                    hash = hash * 59 + this.StartOfDayLocalTime.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // StartOfDayLocalTime (string) minLength
            if(this.StartOfDayLocalTime != null && this.StartOfDayLocalTime.Length < 1)
            {
                yield return new ValidationResult("Invalid value for StartOfDayLocalTime, length must be greater than 1.", new [] { "StartOfDayLocalTime" });
            }

            yield break;
        }
    }

}
