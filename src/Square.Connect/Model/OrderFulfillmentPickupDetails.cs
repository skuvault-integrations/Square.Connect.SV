/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Contains details necessary to fulfill a pickup order.
    /// </summary>
    [DataContract]
    public partial class OrderFulfillmentPickupDetails :  IEquatable<OrderFulfillmentPickupDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderFulfillmentPickupDetails" /> class.
        /// </summary>
        /// <param name="Recipient">The recipient of this pickup fulfillment..</param>
        /// <param name="ExpiresAt">The expiry [timestamp](#workingwithdates) in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;. This timestamp indicates when the pickup fulfillment will expire if it is not accepted by the merchant. Expiration time can only be set up to 7 days in the future. If not set, this pickup fulfillment will be automatically accepted when placed..</param>
        /// <param name="AutoCompleteDuration">The auto completion duration in RFC3339 duration format, e.g., \&quot;P1W3D\&quot;. If set, an open and accepted pickup fulfillment will automatically move to the &#x60;COMPLETED&#x60; state after this period of time. If not set, this pickup fulfillment will remain accepted until it is canceled or completed..</param>
        /// <param name="ScheduleType">The schedule type of the pickup fulfillment. Defaults to &#x60;SCHEDULED&#x60;. See [OrderFulfillmentPickupDetailsScheduleType](#type-orderfulfillmentpickupdetailsscheduletype) for possible values.</param>
        /// <param name="PickupAt">The pickup [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;. For fulfillments with the schedule type &#x60;ASAP&#x60;, this is automatically set to the current time plus the expected duration to prepare the fulfillment. This represents the start of the pickup window..</param>
        /// <param name="PickupWindowDuration">The pickup window duration in RFC3339 duration format, e.g., \&quot;P1W3D\&quot;. This duration represents the window of time for which the order should be picked up after the &#x60;pickup_at&#x60; time. Can be used as an informational guideline for merchants..</param>
        /// <param name="PrepTimeDuration">The preparation time duration in RFC3339 duration format, e.g., \&quot;P1W3D\&quot;. This duration indicates how long it takes the merchant to prepare this fulfillment..</param>
        /// <param name="Note">A general note about the pickup fulfillment.  Notes are useful for providing additional instructions and are displayed in Square apps..</param>
        /// <param name="PlacedAt">The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was placed..</param>
        /// <param name="AcceptedAt">The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was accepted by the merchant..</param>
        /// <param name="RejectedAt">The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was rejected..</param>
        /// <param name="ReadyAt">The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the merchant set the fulfillment as ready for pickup..</param>
        /// <param name="ExpiredAt">The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment expired..</param>
        /// <param name="PickedUpAt">The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was picked up by the recipient..</param>
        /// <param name="CanceledAt">The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was canceled by the merchant or buyer..</param>
        /// <param name="CancelReason">A description of why the pickup was canceled. Max length is 100 characters..</param>
        public OrderFulfillmentPickupDetails(OrderFulfillmentRecipient Recipient = default(OrderFulfillmentRecipient), string ExpiresAt = default(string), string AutoCompleteDuration = default(string), string ScheduleType = default(string), string PickupAt = default(string), string PickupWindowDuration = default(string), string PrepTimeDuration = default(string), string Note = default(string), string PlacedAt = default(string), string AcceptedAt = default(string), string RejectedAt = default(string), string ReadyAt = default(string), string ExpiredAt = default(string), string PickedUpAt = default(string), string CanceledAt = default(string), string CancelReason = default(string))
        {
            this.Recipient = Recipient;
            this.ExpiresAt = ExpiresAt;
            this.AutoCompleteDuration = AutoCompleteDuration;
            this.ScheduleType = ScheduleType;
            this.PickupAt = PickupAt;
            this.PickupWindowDuration = PickupWindowDuration;
            this.PrepTimeDuration = PrepTimeDuration;
            this.Note = Note;
            this.PlacedAt = PlacedAt;
            this.AcceptedAt = AcceptedAt;
            this.RejectedAt = RejectedAt;
            this.ReadyAt = ReadyAt;
            this.ExpiredAt = ExpiredAt;
            this.PickedUpAt = PickedUpAt;
            this.CanceledAt = CanceledAt;
            this.CancelReason = CancelReason;
        }
        
        /// <summary>
        /// The recipient of this pickup fulfillment.
        /// </summary>
        /// <value>The recipient of this pickup fulfillment.</value>
        [DataMember(Name="recipient", EmitDefaultValue=false)]
        public OrderFulfillmentRecipient Recipient { get; set; }
        /// <summary>
        /// The expiry [timestamp](#workingwithdates) in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;. This timestamp indicates when the pickup fulfillment will expire if it is not accepted by the merchant. Expiration time can only be set up to 7 days in the future. If not set, this pickup fulfillment will be automatically accepted when placed.
        /// </summary>
        /// <value>The expiry [timestamp](#workingwithdates) in RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;. This timestamp indicates when the pickup fulfillment will expire if it is not accepted by the merchant. Expiration time can only be set up to 7 days in the future. If not set, this pickup fulfillment will be automatically accepted when placed.</value>
        [DataMember(Name="expires_at", EmitDefaultValue=false)]
        public string ExpiresAt { get; set; }
        /// <summary>
        /// The auto completion duration in RFC3339 duration format, e.g., \&quot;P1W3D\&quot;. If set, an open and accepted pickup fulfillment will automatically move to the &#x60;COMPLETED&#x60; state after this period of time. If not set, this pickup fulfillment will remain accepted until it is canceled or completed.
        /// </summary>
        /// <value>The auto completion duration in RFC3339 duration format, e.g., \&quot;P1W3D\&quot;. If set, an open and accepted pickup fulfillment will automatically move to the &#x60;COMPLETED&#x60; state after this period of time. If not set, this pickup fulfillment will remain accepted until it is canceled or completed.</value>
        [DataMember(Name="auto_complete_duration", EmitDefaultValue=false)]
        public string AutoCompleteDuration { get; set; }
        /// <summary>
        /// The schedule type of the pickup fulfillment. Defaults to &#x60;SCHEDULED&#x60;. See [OrderFulfillmentPickupDetailsScheduleType](#type-orderfulfillmentpickupdetailsscheduletype) for possible values
        /// </summary>
        /// <value>The schedule type of the pickup fulfillment. Defaults to &#x60;SCHEDULED&#x60;. See [OrderFulfillmentPickupDetailsScheduleType](#type-orderfulfillmentpickupdetailsscheduletype) for possible values</value>
        [DataMember(Name="schedule_type", EmitDefaultValue=false)]
        public string ScheduleType { get; set; }
        /// <summary>
        /// The pickup [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;. For fulfillments with the schedule type &#x60;ASAP&#x60;, this is automatically set to the current time plus the expected duration to prepare the fulfillment. This represents the start of the pickup window.
        /// </summary>
        /// <value>The pickup [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;. For fulfillments with the schedule type &#x60;ASAP&#x60;, this is automatically set to the current time plus the expected duration to prepare the fulfillment. This represents the start of the pickup window.</value>
        [DataMember(Name="pickup_at", EmitDefaultValue=false)]
        public string PickupAt { get; set; }
        /// <summary>
        /// The pickup window duration in RFC3339 duration format, e.g., \&quot;P1W3D\&quot;. This duration represents the window of time for which the order should be picked up after the &#x60;pickup_at&#x60; time. Can be used as an informational guideline for merchants.
        /// </summary>
        /// <value>The pickup window duration in RFC3339 duration format, e.g., \&quot;P1W3D\&quot;. This duration represents the window of time for which the order should be picked up after the &#x60;pickup_at&#x60; time. Can be used as an informational guideline for merchants.</value>
        [DataMember(Name="pickup_window_duration", EmitDefaultValue=false)]
        public string PickupWindowDuration { get; set; }
        /// <summary>
        /// The preparation time duration in RFC3339 duration format, e.g., \&quot;P1W3D\&quot;. This duration indicates how long it takes the merchant to prepare this fulfillment.
        /// </summary>
        /// <value>The preparation time duration in RFC3339 duration format, e.g., \&quot;P1W3D\&quot;. This duration indicates how long it takes the merchant to prepare this fulfillment.</value>
        [DataMember(Name="prep_time_duration", EmitDefaultValue=false)]
        public string PrepTimeDuration { get; set; }
        /// <summary>
        /// A general note about the pickup fulfillment.  Notes are useful for providing additional instructions and are displayed in Square apps.
        /// </summary>
        /// <value>A general note about the pickup fulfillment.  Notes are useful for providing additional instructions and are displayed in Square apps.</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }
        /// <summary>
        /// The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was placed.
        /// </summary>
        /// <value>The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was placed.</value>
        [DataMember(Name="placed_at", EmitDefaultValue=false)]
        public string PlacedAt { get; set; }
        /// <summary>
        /// The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was accepted by the merchant.
        /// </summary>
        /// <value>The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was accepted by the merchant.</value>
        [DataMember(Name="accepted_at", EmitDefaultValue=false)]
        public string AcceptedAt { get; set; }
        /// <summary>
        /// The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was rejected.
        /// </summary>
        /// <value>The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was rejected.</value>
        [DataMember(Name="rejected_at", EmitDefaultValue=false)]
        public string RejectedAt { get; set; }
        /// <summary>
        /// The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the merchant set the fulfillment as ready for pickup.
        /// </summary>
        /// <value>The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the merchant set the fulfillment as ready for pickup.</value>
        [DataMember(Name="ready_at", EmitDefaultValue=false)]
        public string ReadyAt { get; set; }
        /// <summary>
        /// The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment expired.
        /// </summary>
        /// <value>The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment expired.</value>
        [DataMember(Name="expired_at", EmitDefaultValue=false)]
        public string ExpiredAt { get; set; }
        /// <summary>
        /// The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was picked up by the recipient.
        /// </summary>
        /// <value>The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was picked up by the recipient.</value>
        [DataMember(Name="picked_up_at", EmitDefaultValue=false)]
        public string PickedUpAt { get; set; }
        /// <summary>
        /// The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was canceled by the merchant or buyer.
        /// </summary>
        /// <value>The [timestamp](#workingwithdates) in RFC3339 timestamp format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;, indicating when the fulfillment was canceled by the merchant or buyer.</value>
        [DataMember(Name="canceled_at", EmitDefaultValue=false)]
        public string CanceledAt { get; set; }
        /// <summary>
        /// A description of why the pickup was canceled. Max length is 100 characters.
        /// </summary>
        /// <value>A description of why the pickup was canceled. Max length is 100 characters.</value>
        [DataMember(Name="cancel_reason", EmitDefaultValue=false)]
        public string CancelReason { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderFulfillmentPickupDetails {\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  AutoCompleteDuration: ").Append(AutoCompleteDuration).Append("\n");
            sb.Append("  ScheduleType: ").Append(ScheduleType).Append("\n");
            sb.Append("  PickupAt: ").Append(PickupAt).Append("\n");
            sb.Append("  PickupWindowDuration: ").Append(PickupWindowDuration).Append("\n");
            sb.Append("  PrepTimeDuration: ").Append(PrepTimeDuration).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  PlacedAt: ").Append(PlacedAt).Append("\n");
            sb.Append("  AcceptedAt: ").Append(AcceptedAt).Append("\n");
            sb.Append("  RejectedAt: ").Append(RejectedAt).Append("\n");
            sb.Append("  ReadyAt: ").Append(ReadyAt).Append("\n");
            sb.Append("  ExpiredAt: ").Append(ExpiredAt).Append("\n");
            sb.Append("  PickedUpAt: ").Append(PickedUpAt).Append("\n");
            sb.Append("  CanceledAt: ").Append(CanceledAt).Append("\n");
            sb.Append("  CancelReason: ").Append(CancelReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderFulfillmentPickupDetails);
        }

        /// <summary>
        /// Returns true if OrderFulfillmentPickupDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderFulfillmentPickupDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderFulfillmentPickupDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Recipient == other.Recipient ||
                    this.Recipient != null &&
                    this.Recipient.Equals(other.Recipient)
                ) && 
                (
                    this.ExpiresAt == other.ExpiresAt ||
                    this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(other.ExpiresAt)
                ) && 
                (
                    this.AutoCompleteDuration == other.AutoCompleteDuration ||
                    this.AutoCompleteDuration != null &&
                    this.AutoCompleteDuration.Equals(other.AutoCompleteDuration)
                ) && 
                (
                    this.ScheduleType == other.ScheduleType ||
                    this.ScheduleType != null &&
                    this.ScheduleType.Equals(other.ScheduleType)
                ) && 
                (
                    this.PickupAt == other.PickupAt ||
                    this.PickupAt != null &&
                    this.PickupAt.Equals(other.PickupAt)
                ) && 
                (
                    this.PickupWindowDuration == other.PickupWindowDuration ||
                    this.PickupWindowDuration != null &&
                    this.PickupWindowDuration.Equals(other.PickupWindowDuration)
                ) && 
                (
                    this.PrepTimeDuration == other.PrepTimeDuration ||
                    this.PrepTimeDuration != null &&
                    this.PrepTimeDuration.Equals(other.PrepTimeDuration)
                ) && 
                (
                    this.Note == other.Note ||
                    this.Note != null &&
                    this.Note.Equals(other.Note)
                ) && 
                (
                    this.PlacedAt == other.PlacedAt ||
                    this.PlacedAt != null &&
                    this.PlacedAt.Equals(other.PlacedAt)
                ) && 
                (
                    this.AcceptedAt == other.AcceptedAt ||
                    this.AcceptedAt != null &&
                    this.AcceptedAt.Equals(other.AcceptedAt)
                ) && 
                (
                    this.RejectedAt == other.RejectedAt ||
                    this.RejectedAt != null &&
                    this.RejectedAt.Equals(other.RejectedAt)
                ) && 
                (
                    this.ReadyAt == other.ReadyAt ||
                    this.ReadyAt != null &&
                    this.ReadyAt.Equals(other.ReadyAt)
                ) && 
                (
                    this.ExpiredAt == other.ExpiredAt ||
                    this.ExpiredAt != null &&
                    this.ExpiredAt.Equals(other.ExpiredAt)
                ) && 
                (
                    this.PickedUpAt == other.PickedUpAt ||
                    this.PickedUpAt != null &&
                    this.PickedUpAt.Equals(other.PickedUpAt)
                ) && 
                (
                    this.CanceledAt == other.CanceledAt ||
                    this.CanceledAt != null &&
                    this.CanceledAt.Equals(other.CanceledAt)
                ) && 
                (
                    this.CancelReason == other.CancelReason ||
                    this.CancelReason != null &&
                    this.CancelReason.Equals(other.CancelReason)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Recipient != null)
                    hash = hash * 59 + this.Recipient.GetHashCode();
                if (this.ExpiresAt != null)
                    hash = hash * 59 + this.ExpiresAt.GetHashCode();
                if (this.AutoCompleteDuration != null)
                    hash = hash * 59 + this.AutoCompleteDuration.GetHashCode();
                if (this.ScheduleType != null)
                    hash = hash * 59 + this.ScheduleType.GetHashCode();
                if (this.PickupAt != null)
                    hash = hash * 59 + this.PickupAt.GetHashCode();
                if (this.PickupWindowDuration != null)
                    hash = hash * 59 + this.PickupWindowDuration.GetHashCode();
                if (this.PrepTimeDuration != null)
                    hash = hash * 59 + this.PrepTimeDuration.GetHashCode();
                if (this.Note != null)
                    hash = hash * 59 + this.Note.GetHashCode();
                if (this.PlacedAt != null)
                    hash = hash * 59 + this.PlacedAt.GetHashCode();
                if (this.AcceptedAt != null)
                    hash = hash * 59 + this.AcceptedAt.GetHashCode();
                if (this.RejectedAt != null)
                    hash = hash * 59 + this.RejectedAt.GetHashCode();
                if (this.ReadyAt != null)
                    hash = hash * 59 + this.ReadyAt.GetHashCode();
                if (this.ExpiredAt != null)
                    hash = hash * 59 + this.ExpiredAt.GetHashCode();
                if (this.PickedUpAt != null)
                    hash = hash * 59 + this.PickedUpAt.GetHashCode();
                if (this.CanceledAt != null)
                    hash = hash * 59 + this.CanceledAt.GetHashCode();
                if (this.CancelReason != null)
                    hash = hash * 59 + this.CancelReason.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Note (string) maxLength
            if(this.Note != null && this.Note.Length > 500)
            {
                yield return new ValidationResult("Invalid value for Note, length must be less than 500.", new [] { "Note" });
            }

            // CancelReason (string) maxLength
            if(this.CancelReason != null && this.CancelReason.Length > 100)
            {
                yield return new ValidationResult("Invalid value for CancelReason, length must be less than 100.", new [] { "CancelReason" });
            }

            yield break;
        }
    }

}
