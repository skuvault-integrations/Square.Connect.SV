/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class V1ListPaymentsRequest :  IEquatable<V1ListPaymentsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1ListPaymentsRequest" /> class.
        /// </summary>
        /// <param name="Order">The order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values.</param>
        /// <param name="BeginTime">The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year..</param>
        /// <param name="EndTime">The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time..</param>
        /// <param name="Limit">The maximum number of payments to return in a single response. This value cannot exceed 200..</param>
        /// <param name="BatchToken">A pagination cursor to retrieve the next set of results for your original query to the endpoint..</param>
        /// <param name="IncludePartial">Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed..</param>
        public V1ListPaymentsRequest(string Order = default(string), string BeginTime = default(string), string EndTime = default(string), int? Limit = default(int?), string BatchToken = default(string), bool? IncludePartial = default(bool?))
        {
            this.Order = Order;
            this.BeginTime = BeginTime;
            this.EndTime = EndTime;
            this.Limit = Limit;
            this.BatchToken = BatchToken;
            this.IncludePartial = IncludePartial;
        }
        
        /// <summary>
        /// The order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values
        /// </summary>
        /// <value>The order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values</value>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public string Order { get; set; }
        /// <summary>
        /// The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
        /// </summary>
        /// <value>The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.</value>
        [DataMember(Name="begin_time", EmitDefaultValue=false)]
        public string BeginTime { get; set; }
        /// <summary>
        /// The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
        /// </summary>
        /// <value>The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.</value>
        [DataMember(Name="end_time", EmitDefaultValue=false)]
        public string EndTime { get; set; }
        /// <summary>
        /// The maximum number of payments to return in a single response. This value cannot exceed 200.
        /// </summary>
        /// <value>The maximum number of payments to return in a single response. This value cannot exceed 200.</value>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public int? Limit { get; set; }
        /// <summary>
        /// A pagination cursor to retrieve the next set of results for your original query to the endpoint.
        /// </summary>
        /// <value>A pagination cursor to retrieve the next set of results for your original query to the endpoint.</value>
        [DataMember(Name="batch_token", EmitDefaultValue=false)]
        public string BatchToken { get; set; }
        /// <summary>
        /// Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
        /// </summary>
        /// <value>Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.</value>
        [DataMember(Name="include_partial", EmitDefaultValue=false)]
        public bool? IncludePartial { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1ListPaymentsRequest {\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  BeginTime: ").Append(BeginTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  BatchToken: ").Append(BatchToken).Append("\n");
            sb.Append("  IncludePartial: ").Append(IncludePartial).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1ListPaymentsRequest);
        }

        /// <summary>
        /// Returns true if V1ListPaymentsRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of V1ListPaymentsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1ListPaymentsRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Order == other.Order ||
                    this.Order != null &&
                    this.Order.Equals(other.Order)
                ) && 
                (
                    this.BeginTime == other.BeginTime ||
                    this.BeginTime != null &&
                    this.BeginTime.Equals(other.BeginTime)
                ) && 
                (
                    this.EndTime == other.EndTime ||
                    this.EndTime != null &&
                    this.EndTime.Equals(other.EndTime)
                ) && 
                (
                    this.Limit == other.Limit ||
                    this.Limit != null &&
                    this.Limit.Equals(other.Limit)
                ) && 
                (
                    this.BatchToken == other.BatchToken ||
                    this.BatchToken != null &&
                    this.BatchToken.Equals(other.BatchToken)
                ) && 
                (
                    this.IncludePartial == other.IncludePartial ||
                    this.IncludePartial != null &&
                    this.IncludePartial.Equals(other.IncludePartial)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Order != null)
                    hash = hash * 59 + this.Order.GetHashCode();
                if (this.BeginTime != null)
                    hash = hash * 59 + this.BeginTime.GetHashCode();
                if (this.EndTime != null)
                    hash = hash * 59 + this.EndTime.GetHashCode();
                if (this.Limit != null)
                    hash = hash * 59 + this.Limit.GetHashCode();
                if (this.BatchToken != null)
                    hash = hash * 59 + this.BatchToken.GetHashCode();
                if (this.IncludePartial != null)
                    hash = hash * 59 + this.IncludePartial.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
