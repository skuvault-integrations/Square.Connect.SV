/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Represents a physical address.
    /// </summary>
    [DataContract]
    public partial class Address :  IEquatable<Address>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="AddressLine1">The first line of the address.  Fields that start with &#x60;address_line&#x60; provide the address&#39;s most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields)..</param>
        /// <param name="AddressLine2">The second line of the address, if any..</param>
        /// <param name="AddressLine3">The third line of the address, if any..</param>
        /// <param name="Locality">The city or town of the address..</param>
        /// <param name="Sublocality">A civil region within the address&#39;s &#x60;locality&#x60;, if any..</param>
        /// <param name="Sublocality2">A civil region within the address&#39;s &#x60;sublocality&#x60;, if any..</param>
        /// <param name="Sublocality3">A civil region within the address&#39;s &#x60;sublocality_2&#x60;, if any..</param>
        /// <param name="AdministrativeDistrictLevel1">A civil entity within the address&#39;s country. In the US, this is the state..</param>
        /// <param name="AdministrativeDistrictLevel2">A civil entity within the address&#39;s &#x60;administrative_district_level_1&#x60;. In the US, this is the county..</param>
        /// <param name="AdministrativeDistrictLevel3">A civil entity within the address&#39;s &#x60;administrative_district_level_2&#x60;, if any..</param>
        /// <param name="PostalCode">The address&#39;s postal code..</param>
        /// <param name="Country">The address&#39;s country, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values.</param>
        /// <param name="FirstName">Optional first name when it&#39;s representing recipient..</param>
        /// <param name="LastName">Optional last name when it&#39;s representing recipient..</param>
        /// <param name="Organization">Optional organization name when it&#39;s representing recipient..</param>
        public Address(string AddressLine1 = default(string), string AddressLine2 = default(string), string AddressLine3 = default(string), string Locality = default(string), string Sublocality = default(string), string Sublocality2 = default(string), string Sublocality3 = default(string), string AdministrativeDistrictLevel1 = default(string), string AdministrativeDistrictLevel2 = default(string), string AdministrativeDistrictLevel3 = default(string), string PostalCode = default(string), string Country = default(string), string FirstName = default(string), string LastName = default(string), string Organization = default(string))
        {
            this.AddressLine1 = AddressLine1;
            this.AddressLine2 = AddressLine2;
            this.AddressLine3 = AddressLine3;
            this.Locality = Locality;
            this.Sublocality = Sublocality;
            this.Sublocality2 = Sublocality2;
            this.Sublocality3 = Sublocality3;
            this.AdministrativeDistrictLevel1 = AdministrativeDistrictLevel1;
            this.AdministrativeDistrictLevel2 = AdministrativeDistrictLevel2;
            this.AdministrativeDistrictLevel3 = AdministrativeDistrictLevel3;
            this.PostalCode = PostalCode;
            this.Country = Country;
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.Organization = Organization;
        }
        
        /// <summary>
        /// The first line of the address.  Fields that start with &#x60;address_line&#x60; provide the address&#39;s most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields).
        /// </summary>
        /// <value>The first line of the address.  Fields that start with &#x60;address_line&#x60; provide the address&#39;s most specific details, like street number, street name, and building name. They do *not* provide less specific details like city, state/province, or country (these details are provided in other fields).</value>
        [DataMember(Name="address_line_1", EmitDefaultValue=false)]
        public string AddressLine1 { get; set; }
        /// <summary>
        /// The second line of the address, if any.
        /// </summary>
        /// <value>The second line of the address, if any.</value>
        [DataMember(Name="address_line_2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }
        /// <summary>
        /// The third line of the address, if any.
        /// </summary>
        /// <value>The third line of the address, if any.</value>
        [DataMember(Name="address_line_3", EmitDefaultValue=false)]
        public string AddressLine3 { get; set; }
        /// <summary>
        /// The city or town of the address.
        /// </summary>
        /// <value>The city or town of the address.</value>
        [DataMember(Name="locality", EmitDefaultValue=false)]
        public string Locality { get; set; }
        /// <summary>
        /// A civil region within the address&#39;s &#x60;locality&#x60;, if any.
        /// </summary>
        /// <value>A civil region within the address&#39;s &#x60;locality&#x60;, if any.</value>
        [DataMember(Name="sublocality", EmitDefaultValue=false)]
        public string Sublocality { get; set; }
        /// <summary>
        /// A civil region within the address&#39;s &#x60;sublocality&#x60;, if any.
        /// </summary>
        /// <value>A civil region within the address&#39;s &#x60;sublocality&#x60;, if any.</value>
        [DataMember(Name="sublocality_2", EmitDefaultValue=false)]
        public string Sublocality2 { get; set; }
        /// <summary>
        /// A civil region within the address&#39;s &#x60;sublocality_2&#x60;, if any.
        /// </summary>
        /// <value>A civil region within the address&#39;s &#x60;sublocality_2&#x60;, if any.</value>
        [DataMember(Name="sublocality_3", EmitDefaultValue=false)]
        public string Sublocality3 { get; set; }
        /// <summary>
        /// A civil entity within the address&#39;s country. In the US, this is the state.
        /// </summary>
        /// <value>A civil entity within the address&#39;s country. In the US, this is the state.</value>
        [DataMember(Name="administrative_district_level_1", EmitDefaultValue=false)]
        public string AdministrativeDistrictLevel1 { get; set; }
        /// <summary>
        /// A civil entity within the address&#39;s &#x60;administrative_district_level_1&#x60;. In the US, this is the county.
        /// </summary>
        /// <value>A civil entity within the address&#39;s &#x60;administrative_district_level_1&#x60;. In the US, this is the county.</value>
        [DataMember(Name="administrative_district_level_2", EmitDefaultValue=false)]
        public string AdministrativeDistrictLevel2 { get; set; }
        /// <summary>
        /// A civil entity within the address&#39;s &#x60;administrative_district_level_2&#x60;, if any.
        /// </summary>
        /// <value>A civil entity within the address&#39;s &#x60;administrative_district_level_2&#x60;, if any.</value>
        [DataMember(Name="administrative_district_level_3", EmitDefaultValue=false)]
        public string AdministrativeDistrictLevel3 { get; set; }
        /// <summary>
        /// The address&#39;s postal code.
        /// </summary>
        /// <value>The address&#39;s postal code.</value>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }
        /// <summary>
        /// The address&#39;s country, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values
        /// </summary>
        /// <value>The address&#39;s country, in ISO 3166-1-alpha-2 format. See [Country](#type-country) for possible values</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// Optional first name when it&#39;s representing recipient.
        /// </summary>
        /// <value>Optional first name when it&#39;s representing recipient.</value>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// Optional last name when it&#39;s representing recipient.
        /// </summary>
        /// <value>Optional last name when it&#39;s representing recipient.</value>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// Optional organization name when it&#39;s representing recipient.
        /// </summary>
        /// <value>Optional organization name when it&#39;s representing recipient.</value>
        [DataMember(Name="organization", EmitDefaultValue=false)]
        public string Organization { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  Sublocality: ").Append(Sublocality).Append("\n");
            sb.Append("  Sublocality2: ").Append(Sublocality2).Append("\n");
            sb.Append("  Sublocality3: ").Append(Sublocality3).Append("\n");
            sb.Append("  AdministrativeDistrictLevel1: ").Append(AdministrativeDistrictLevel1).Append("\n");
            sb.Append("  AdministrativeDistrictLevel2: ").Append(AdministrativeDistrictLevel2).Append("\n");
            sb.Append("  AdministrativeDistrictLevel3: ").Append(AdministrativeDistrictLevel3).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Address);
        }

        /// <summary>
        /// Returns true if Address instances are equal
        /// </summary>
        /// <param name="other">Instance of Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Address other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AddressLine1 == other.AddressLine1 ||
                    this.AddressLine1 != null &&
                    this.AddressLine1.Equals(other.AddressLine1)
                ) && 
                (
                    this.AddressLine2 == other.AddressLine2 ||
                    this.AddressLine2 != null &&
                    this.AddressLine2.Equals(other.AddressLine2)
                ) && 
                (
                    this.AddressLine3 == other.AddressLine3 ||
                    this.AddressLine3 != null &&
                    this.AddressLine3.Equals(other.AddressLine3)
                ) && 
                (
                    this.Locality == other.Locality ||
                    this.Locality != null &&
                    this.Locality.Equals(other.Locality)
                ) && 
                (
                    this.Sublocality == other.Sublocality ||
                    this.Sublocality != null &&
                    this.Sublocality.Equals(other.Sublocality)
                ) && 
                (
                    this.Sublocality2 == other.Sublocality2 ||
                    this.Sublocality2 != null &&
                    this.Sublocality2.Equals(other.Sublocality2)
                ) && 
                (
                    this.Sublocality3 == other.Sublocality3 ||
                    this.Sublocality3 != null &&
                    this.Sublocality3.Equals(other.Sublocality3)
                ) && 
                (
                    this.AdministrativeDistrictLevel1 == other.AdministrativeDistrictLevel1 ||
                    this.AdministrativeDistrictLevel1 != null &&
                    this.AdministrativeDistrictLevel1.Equals(other.AdministrativeDistrictLevel1)
                ) && 
                (
                    this.AdministrativeDistrictLevel2 == other.AdministrativeDistrictLevel2 ||
                    this.AdministrativeDistrictLevel2 != null &&
                    this.AdministrativeDistrictLevel2.Equals(other.AdministrativeDistrictLevel2)
                ) && 
                (
                    this.AdministrativeDistrictLevel3 == other.AdministrativeDistrictLevel3 ||
                    this.AdministrativeDistrictLevel3 != null &&
                    this.AdministrativeDistrictLevel3.Equals(other.AdministrativeDistrictLevel3)
                ) && 
                (
                    this.PostalCode == other.PostalCode ||
                    this.PostalCode != null &&
                    this.PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.Organization == other.Organization ||
                    this.Organization != null &&
                    this.Organization.Equals(other.Organization)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AddressLine1 != null)
                    hash = hash * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hash = hash * 59 + this.AddressLine2.GetHashCode();
                if (this.AddressLine3 != null)
                    hash = hash * 59 + this.AddressLine3.GetHashCode();
                if (this.Locality != null)
                    hash = hash * 59 + this.Locality.GetHashCode();
                if (this.Sublocality != null)
                    hash = hash * 59 + this.Sublocality.GetHashCode();
                if (this.Sublocality2 != null)
                    hash = hash * 59 + this.Sublocality2.GetHashCode();
                if (this.Sublocality3 != null)
                    hash = hash * 59 + this.Sublocality3.GetHashCode();
                if (this.AdministrativeDistrictLevel1 != null)
                    hash = hash * 59 + this.AdministrativeDistrictLevel1.GetHashCode();
                if (this.AdministrativeDistrictLevel2 != null)
                    hash = hash * 59 + this.AdministrativeDistrictLevel2.GetHashCode();
                if (this.AdministrativeDistrictLevel3 != null)
                    hash = hash * 59 + this.AdministrativeDistrictLevel3.GetHashCode();
                if (this.PostalCode != null)
                    hash = hash * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.Organization != null)
                    hash = hash * 59 + this.Organization.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
