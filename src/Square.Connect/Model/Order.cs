/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Contains all information related to a single order to process with Square, including line items that specify the products to purchase. Order objects also include information on any associated tenders, refunds, and returns.  All Connect V2 Transactions have all been converted to Orders including all associated itemization data.
    /// </summary>
    [DataContract]
    public partial class Order :  IEquatable<Order>, IValidatableObject
    {
        /// <summary>
        /// The current state of the order. `OPEN`,`COMPLETED`,`CANCELED` See [OrderState](#type-orderstate) for possible values
        /// </summary>
        /// <value>The current state of the order. `OPEN`,`COMPLETED`,`CANCELED` See [OrderState](#type-orderstate) for possible values</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum OPEN for "OPEN"
            /// </summary>
            [EnumMember(Value = "OPEN")]
            OPEN,
            
            /// <summary>
            /// Enum COMPLETED for "COMPLETED"
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED,
            
            /// <summary>
            /// Enum CANCELED for "CANCELED"
            /// </summary>
            [EnumMember(Value = "CANCELED")]
            CANCELED
        }

        /// <summary>
        /// The current state of the order. `OPEN`,`COMPLETED`,`CANCELED` See [OrderState](#type-orderstate) for possible values
        /// </summary>
        /// <value>The current state of the order. `OPEN`,`COMPLETED`,`CANCELED` See [OrderState](#type-orderstate) for possible values</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Order() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="Id">The order&#39;s unique ID.  This field is read-only..</param>
        /// <param name="LocationId">The ID of the merchant location this order is associated with. (required).</param>
        /// <param name="ReferenceId">A client specified identifier to associate an entity in another system with this order..</param>
        /// <param name="Source">The origination details of the order..</param>
        /// <param name="CustomerId">The [Customer](#type-customer) ID of the customer associated with the order..</param>
        /// <param name="LineItems">The line items included in the order..</param>
        /// <param name="Taxes">A list of taxes applied to this order. On read or retrieve, this list includes both order-level and item-level taxes. When creating an Order, set your order-level taxes in this list..</param>
        /// <param name="Discounts">A list of discounts applied to this order. On read or retrieve, this list includes both order-level and item-level discounts. When creating an Order, set your order-level discounts in this list..</param>
        /// <param name="ServiceCharges">A list of service charges applied to the order..</param>
        /// <param name="Fulfillments">Details on order fulfillment.  Orders can only be created with at most one fulfillment. However, orders returned by the API may contain multiple fulfillments..</param>
        /// <param name="Returns">Collection of items from sale Orders being returned in this one. Normally part of an Itemized Return or Exchange.  There will be exactly one &#x60;Return&#x60; object per sale Order being referenced.  This field is read-only..</param>
        /// <param name="ReturnAmounts">Rollup of returned money amounts.  This field is read-only..</param>
        /// <param name="NetAmounts">Net money amounts (sale money - return money).  This field is read-only..</param>
        /// <param name="RoundingAdjustment">A positive or negative rounding adjustment to the total of the order, commonly used to apply Cash Rounding when the minimum unit of account is smaller than the lowest physical denomination of currency.  This field is read-only..</param>
        /// <param name="Tenders">The Tenders which were used to pay for the Order. This field is read-only..</param>
        /// <param name="Refunds">The Refunds that are part of this Order. This field is read-only..</param>
        /// <param name="CreatedAt">Timestamp for when the order was created. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.  This field is read-only..</param>
        /// <param name="UpdatedAt">Timestamp for when the order was last updated. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.  This field is read-only..</param>
        /// <param name="ClosedAt">Timestamp for when the order was closed. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.  This field is read-only..</param>
        /// <param name="State">The current state of the order. &#x60;OPEN&#x60;,&#x60;COMPLETED&#x60;,&#x60;CANCELED&#x60; See [OrderState](#type-orderstate) for possible values.</param>
        /// <param name="TotalMoney">The total amount of money to collect for the order.  This field is read-only..</param>
        /// <param name="TotalTaxMoney">The total tax amount of money to collect for the order.  This field is read-only..</param>
        /// <param name="TotalDiscountMoney">The total discount amount of money to collect for the order.  This field is read-only..</param>
        /// <param name="TotalServiceChargeMoney">The total amount of money collected in service charges for the order.  Note: &#x60;total_service_charge_money&#x60; is the sum of &#x60;applied_money&#x60; fields for each individual service charge. Therefore, &#x60;total_service_charge_money&#x60; will only include inclusive tax amounts, not additive tax amounts.  This field is read-only..</param>
        public Order(string Id = default(string), string LocationId = default(string), string ReferenceId = default(string), OrderSource Source = default(OrderSource), string CustomerId = default(string), List<OrderLineItem> LineItems = default(List<OrderLineItem>), List<OrderLineItemTax> Taxes = default(List<OrderLineItemTax>), List<OrderLineItemDiscount> Discounts = default(List<OrderLineItemDiscount>), List<OrderServiceCharge> ServiceCharges = default(List<OrderServiceCharge>), List<OrderFulfillment> Fulfillments = default(List<OrderFulfillment>), List<OrderReturn> Returns = default(List<OrderReturn>), OrderMoneyAmounts ReturnAmounts = default(OrderMoneyAmounts), OrderMoneyAmounts NetAmounts = default(OrderMoneyAmounts), OrderRoundingAdjustment RoundingAdjustment = default(OrderRoundingAdjustment), List<Tender> Tenders = default(List<Tender>), List<Refund> Refunds = default(List<Refund>), string CreatedAt = default(string), string UpdatedAt = default(string), string ClosedAt = default(string), StateEnum? State = default(StateEnum?), Money TotalMoney = default(Money), Money TotalTaxMoney = default(Money), Money TotalDiscountMoney = default(Money), Money TotalServiceChargeMoney = default(Money))
        {
            // to ensure "LocationId" is required (not null)
            if (LocationId == null)
            {
                throw new InvalidDataException("LocationId is a required property for Order and cannot be null");
            }
            else
            {
                this.LocationId = LocationId;
            }
            this.Id = Id;
            this.ReferenceId = ReferenceId;
            this.Source = Source;
            this.CustomerId = CustomerId;
            this.LineItems = LineItems;
            this.Taxes = Taxes;
            this.Discounts = Discounts;
            this.ServiceCharges = ServiceCharges;
            this.Fulfillments = Fulfillments;
            this.Returns = Returns;
            this.ReturnAmounts = ReturnAmounts;
            this.NetAmounts = NetAmounts;
            this.RoundingAdjustment = RoundingAdjustment;
            this.Tenders = Tenders;
            this.Refunds = Refunds;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
            this.ClosedAt = ClosedAt;
            this.State = State;
            this.TotalMoney = TotalMoney;
            this.TotalTaxMoney = TotalTaxMoney;
            this.TotalDiscountMoney = TotalDiscountMoney;
            this.TotalServiceChargeMoney = TotalServiceChargeMoney;
        }
        
        /// <summary>
        /// The order&#39;s unique ID.  This field is read-only.
        /// </summary>
        /// <value>The order&#39;s unique ID.  This field is read-only.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The ID of the merchant location this order is associated with.
        /// </summary>
        /// <value>The ID of the merchant location this order is associated with.</value>
        [DataMember(Name="location_id", EmitDefaultValue=false)]
        public string LocationId { get; set; }
        /// <summary>
        /// A client specified identifier to associate an entity in another system with this order.
        /// </summary>
        /// <value>A client specified identifier to associate an entity in another system with this order.</value>
        [DataMember(Name="reference_id", EmitDefaultValue=false)]
        public string ReferenceId { get; set; }
        /// <summary>
        /// The origination details of the order.
        /// </summary>
        /// <value>The origination details of the order.</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public OrderSource Source { get; set; }
        /// <summary>
        /// The [Customer](#type-customer) ID of the customer associated with the order.
        /// </summary>
        /// <value>The [Customer](#type-customer) ID of the customer associated with the order.</value>
        [DataMember(Name="customer_id", EmitDefaultValue=false)]
        public string CustomerId { get; set; }
        /// <summary>
        /// The line items included in the order.
        /// </summary>
        /// <value>The line items included in the order.</value>
        [DataMember(Name="line_items", EmitDefaultValue=false)]
        public List<OrderLineItem> LineItems { get; set; }
        /// <summary>
        /// A list of taxes applied to this order. On read or retrieve, this list includes both order-level and item-level taxes. When creating an Order, set your order-level taxes in this list.
        /// </summary>
        /// <value>A list of taxes applied to this order. On read or retrieve, this list includes both order-level and item-level taxes. When creating an Order, set your order-level taxes in this list.</value>
        [DataMember(Name="taxes", EmitDefaultValue=false)]
        public List<OrderLineItemTax> Taxes { get; set; }
        /// <summary>
        /// A list of discounts applied to this order. On read or retrieve, this list includes both order-level and item-level discounts. When creating an Order, set your order-level discounts in this list.
        /// </summary>
        /// <value>A list of discounts applied to this order. On read or retrieve, this list includes both order-level and item-level discounts. When creating an Order, set your order-level discounts in this list.</value>
        [DataMember(Name="discounts", EmitDefaultValue=false)]
        public List<OrderLineItemDiscount> Discounts { get; set; }
        /// <summary>
        /// A list of service charges applied to the order.
        /// </summary>
        /// <value>A list of service charges applied to the order.</value>
        [DataMember(Name="service_charges", EmitDefaultValue=false)]
        public List<OrderServiceCharge> ServiceCharges { get; set; }
        /// <summary>
        /// Details on order fulfillment.  Orders can only be created with at most one fulfillment. However, orders returned by the API may contain multiple fulfillments.
        /// </summary>
        /// <value>Details on order fulfillment.  Orders can only be created with at most one fulfillment. However, orders returned by the API may contain multiple fulfillments.</value>
        [DataMember(Name="fulfillments", EmitDefaultValue=false)]
        public List<OrderFulfillment> Fulfillments { get; set; }
        /// <summary>
        /// Collection of items from sale Orders being returned in this one. Normally part of an Itemized Return or Exchange.  There will be exactly one &#x60;Return&#x60; object per sale Order being referenced.  This field is read-only.
        /// </summary>
        /// <value>Collection of items from sale Orders being returned in this one. Normally part of an Itemized Return or Exchange.  There will be exactly one &#x60;Return&#x60; object per sale Order being referenced.  This field is read-only.</value>
        [DataMember(Name="returns", EmitDefaultValue=false)]
        public List<OrderReturn> Returns { get; set; }
        /// <summary>
        /// Rollup of returned money amounts.  This field is read-only.
        /// </summary>
        /// <value>Rollup of returned money amounts.  This field is read-only.</value>
        [DataMember(Name="return_amounts", EmitDefaultValue=false)]
        public OrderMoneyAmounts ReturnAmounts { get; set; }
        /// <summary>
        /// Net money amounts (sale money - return money).  This field is read-only.
        /// </summary>
        /// <value>Net money amounts (sale money - return money).  This field is read-only.</value>
        [DataMember(Name="net_amounts", EmitDefaultValue=false)]
        public OrderMoneyAmounts NetAmounts { get; set; }
        /// <summary>
        /// A positive or negative rounding adjustment to the total of the order, commonly used to apply Cash Rounding when the minimum unit of account is smaller than the lowest physical denomination of currency.  This field is read-only.
        /// </summary>
        /// <value>A positive or negative rounding adjustment to the total of the order, commonly used to apply Cash Rounding when the minimum unit of account is smaller than the lowest physical denomination of currency.  This field is read-only.</value>
        [DataMember(Name="rounding_adjustment", EmitDefaultValue=false)]
        public OrderRoundingAdjustment RoundingAdjustment { get; set; }
        /// <summary>
        /// The Tenders which were used to pay for the Order. This field is read-only.
        /// </summary>
        /// <value>The Tenders which were used to pay for the Order. This field is read-only.</value>
        [DataMember(Name="tenders", EmitDefaultValue=false)]
        public List<Tender> Tenders { get; set; }
        /// <summary>
        /// The Refunds that are part of this Order. This field is read-only.
        /// </summary>
        /// <value>The Refunds that are part of this Order. This field is read-only.</value>
        [DataMember(Name="refunds", EmitDefaultValue=false)]
        public List<Refund> Refunds { get; set; }
        /// <summary>
        /// Timestamp for when the order was created. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.  This field is read-only.
        /// </summary>
        /// <value>Timestamp for when the order was created. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.  This field is read-only.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }
        /// <summary>
        /// Timestamp for when the order was last updated. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.  This field is read-only.
        /// </summary>
        /// <value>Timestamp for when the order was last updated. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.  This field is read-only.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }
        /// <summary>
        /// Timestamp for when the order was closed. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.  This field is read-only.
        /// </summary>
        /// <value>Timestamp for when the order was closed. In RFC 3339 format, e.g., \&quot;2016-09-04T23:59:33.123Z\&quot;.  This field is read-only.</value>
        [DataMember(Name="closed_at", EmitDefaultValue=false)]
        public string ClosedAt { get; set; }
        /// <summary>
        /// The total amount of money to collect for the order.  This field is read-only.
        /// </summary>
        /// <value>The total amount of money to collect for the order.  This field is read-only.</value>
        [DataMember(Name="total_money", EmitDefaultValue=false)]
        public Money TotalMoney { get; set; }
        /// <summary>
        /// The total tax amount of money to collect for the order.  This field is read-only.
        /// </summary>
        /// <value>The total tax amount of money to collect for the order.  This field is read-only.</value>
        [DataMember(Name="total_tax_money", EmitDefaultValue=false)]
        public Money TotalTaxMoney { get; set; }
        /// <summary>
        /// The total discount amount of money to collect for the order.  This field is read-only.
        /// </summary>
        /// <value>The total discount amount of money to collect for the order.  This field is read-only.</value>
        [DataMember(Name="total_discount_money", EmitDefaultValue=false)]
        public Money TotalDiscountMoney { get; set; }
        /// <summary>
        /// The total amount of money collected in service charges for the order.  Note: &#x60;total_service_charge_money&#x60; is the sum of &#x60;applied_money&#x60; fields for each individual service charge. Therefore, &#x60;total_service_charge_money&#x60; will only include inclusive tax amounts, not additive tax amounts.  This field is read-only.
        /// </summary>
        /// <value>The total amount of money collected in service charges for the order.  Note: &#x60;total_service_charge_money&#x60; is the sum of &#x60;applied_money&#x60; fields for each individual service charge. Therefore, &#x60;total_service_charge_money&#x60; will only include inclusive tax amounts, not additive tax amounts.  This field is read-only.</value>
        [DataMember(Name="total_service_charge_money", EmitDefaultValue=false)]
        public Money TotalServiceChargeMoney { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  Discounts: ").Append(Discounts).Append("\n");
            sb.Append("  ServiceCharges: ").Append(ServiceCharges).Append("\n");
            sb.Append("  Fulfillments: ").Append(Fulfillments).Append("\n");
            sb.Append("  Returns: ").Append(Returns).Append("\n");
            sb.Append("  ReturnAmounts: ").Append(ReturnAmounts).Append("\n");
            sb.Append("  NetAmounts: ").Append(NetAmounts).Append("\n");
            sb.Append("  RoundingAdjustment: ").Append(RoundingAdjustment).Append("\n");
            sb.Append("  Tenders: ").Append(Tenders).Append("\n");
            sb.Append("  Refunds: ").Append(Refunds).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ClosedAt: ").Append(ClosedAt).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TotalMoney: ").Append(TotalMoney).Append("\n");
            sb.Append("  TotalTaxMoney: ").Append(TotalTaxMoney).Append("\n");
            sb.Append("  TotalDiscountMoney: ").Append(TotalDiscountMoney).Append("\n");
            sb.Append("  TotalServiceChargeMoney: ").Append(TotalServiceChargeMoney).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.LocationId == other.LocationId ||
                    this.LocationId != null &&
                    this.LocationId.Equals(other.LocationId)
                ) && 
                (
                    this.ReferenceId == other.ReferenceId ||
                    this.ReferenceId != null &&
                    this.ReferenceId.Equals(other.ReferenceId)
                ) && 
                (
                    this.Source == other.Source ||
                    this.Source != null &&
                    this.Source.Equals(other.Source)
                ) && 
                (
                    this.CustomerId == other.CustomerId ||
                    this.CustomerId != null &&
                    this.CustomerId.Equals(other.CustomerId)
                ) && 
                (
                    this.LineItems == other.LineItems ||
                    this.LineItems != null &&
                    this.LineItems.SequenceEqual(other.LineItems)
                ) && 
                (
                    this.Taxes == other.Taxes ||
                    this.Taxes != null &&
                    this.Taxes.SequenceEqual(other.Taxes)
                ) && 
                (
                    this.Discounts == other.Discounts ||
                    this.Discounts != null &&
                    this.Discounts.SequenceEqual(other.Discounts)
                ) && 
                (
                    this.ServiceCharges == other.ServiceCharges ||
                    this.ServiceCharges != null &&
                    this.ServiceCharges.SequenceEqual(other.ServiceCharges)
                ) && 
                (
                    this.Fulfillments == other.Fulfillments ||
                    this.Fulfillments != null &&
                    this.Fulfillments.SequenceEqual(other.Fulfillments)
                ) && 
                (
                    this.Returns == other.Returns ||
                    this.Returns != null &&
                    this.Returns.SequenceEqual(other.Returns)
                ) && 
                (
                    this.ReturnAmounts == other.ReturnAmounts ||
                    this.ReturnAmounts != null &&
                    this.ReturnAmounts.Equals(other.ReturnAmounts)
                ) && 
                (
                    this.NetAmounts == other.NetAmounts ||
                    this.NetAmounts != null &&
                    this.NetAmounts.Equals(other.NetAmounts)
                ) && 
                (
                    this.RoundingAdjustment == other.RoundingAdjustment ||
                    this.RoundingAdjustment != null &&
                    this.RoundingAdjustment.Equals(other.RoundingAdjustment)
                ) && 
                (
                    this.Tenders == other.Tenders ||
                    this.Tenders != null &&
                    this.Tenders.SequenceEqual(other.Tenders)
                ) && 
                (
                    this.Refunds == other.Refunds ||
                    this.Refunds != null &&
                    this.Refunds.SequenceEqual(other.Refunds)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    this.ClosedAt == other.ClosedAt ||
                    this.ClosedAt != null &&
                    this.ClosedAt.Equals(other.ClosedAt)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.TotalMoney == other.TotalMoney ||
                    this.TotalMoney != null &&
                    this.TotalMoney.Equals(other.TotalMoney)
                ) && 
                (
                    this.TotalTaxMoney == other.TotalTaxMoney ||
                    this.TotalTaxMoney != null &&
                    this.TotalTaxMoney.Equals(other.TotalTaxMoney)
                ) && 
                (
                    this.TotalDiscountMoney == other.TotalDiscountMoney ||
                    this.TotalDiscountMoney != null &&
                    this.TotalDiscountMoney.Equals(other.TotalDiscountMoney)
                ) && 
                (
                    this.TotalServiceChargeMoney == other.TotalServiceChargeMoney ||
                    this.TotalServiceChargeMoney != null &&
                    this.TotalServiceChargeMoney.Equals(other.TotalServiceChargeMoney)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.LocationId != null)
                    hash = hash * 59 + this.LocationId.GetHashCode();
                if (this.ReferenceId != null)
                    hash = hash * 59 + this.ReferenceId.GetHashCode();
                if (this.Source != null)
                    hash = hash * 59 + this.Source.GetHashCode();
                if (this.CustomerId != null)
                    hash = hash * 59 + this.CustomerId.GetHashCode();
                if (this.LineItems != null)
                    hash = hash * 59 + this.LineItems.GetHashCode();
                if (this.Taxes != null)
                    hash = hash * 59 + this.Taxes.GetHashCode();
                if (this.Discounts != null)
                    hash = hash * 59 + this.Discounts.GetHashCode();
                if (this.ServiceCharges != null)
                    hash = hash * 59 + this.ServiceCharges.GetHashCode();
                if (this.Fulfillments != null)
                    hash = hash * 59 + this.Fulfillments.GetHashCode();
                if (this.Returns != null)
                    hash = hash * 59 + this.Returns.GetHashCode();
                if (this.ReturnAmounts != null)
                    hash = hash * 59 + this.ReturnAmounts.GetHashCode();
                if (this.NetAmounts != null)
                    hash = hash * 59 + this.NetAmounts.GetHashCode();
                if (this.RoundingAdjustment != null)
                    hash = hash * 59 + this.RoundingAdjustment.GetHashCode();
                if (this.Tenders != null)
                    hash = hash * 59 + this.Tenders.GetHashCode();
                if (this.Refunds != null)
                    hash = hash * 59 + this.Refunds.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                if (this.ClosedAt != null)
                    hash = hash * 59 + this.ClosedAt.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.TotalMoney != null)
                    hash = hash * 59 + this.TotalMoney.GetHashCode();
                if (this.TotalTaxMoney != null)
                    hash = hash * 59 + this.TotalTaxMoney.GetHashCode();
                if (this.TotalDiscountMoney != null)
                    hash = hash * 59 + this.TotalDiscountMoney.GetHashCode();
                if (this.TotalServiceChargeMoney != null)
                    hash = hash * 59 + this.TotalServiceChargeMoney.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // LocationId (string) minLength
            if(this.LocationId != null && this.LocationId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for LocationId, length must be greater than 1.", new [] { "LocationId" });
            }

            // ReferenceId (string) maxLength
            if(this.ReferenceId != null && this.ReferenceId.Length > 40)
            {
                yield return new ValidationResult("Invalid value for ReferenceId, length must be less than 40.", new [] { "ReferenceId" });
            }

            yield break;
        }
    }

}
