/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Contains details on how to fulfill this order.
    /// </summary>
    [DataContract]
    public partial class OrderFulfillment :  IEquatable<OrderFulfillment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderFulfillment" /> class.
        /// </summary>
        /// <param name="Uid">Unique ID that identifies the fulfillment only within this order..</param>
        /// <param name="Type">The type of the fulfillment. See [OrderFulfillmentType](#type-orderfulfillmenttype) for possible values.</param>
        /// <param name="State">The state of the fulfillment. See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values.</param>
        /// <param name="PickupDetails">Contains details for a pickup fulfillment. Required when fulfillment type is &#x60;PICKUP&#x60;..</param>
        /// <param name="ShipmentDetails">Contains details for a shipment fulfillment. Required when fulfillment type is &#x60;SHIPMENT&#x60;.  A shipment fulfillment&#39;s relationship to fulfillment &#x60;state&#x60;: &#x60;PROPOSED&#x60;: A shipment is requested. &#x60;RESERVED&#x60;: Fulfillment accepted. Shipment processing. &#x60;PREPARED&#x60;: Shipment packaged. Shipping label created. &#x60;COMPLETED&#x60;: Package has been shipped. &#x60;CANCELED&#x60;: Shipment has been canceled. &#x60;FAILED&#x60;: Shipment has failed..</param>
        public OrderFulfillment(string Uid = default(string), string Type = default(string), string State = default(string), OrderFulfillmentPickupDetails PickupDetails = default(OrderFulfillmentPickupDetails), OrderFulfillmentShipmentDetails ShipmentDetails = default(OrderFulfillmentShipmentDetails))
        {
            this.Uid = Uid;
            this.Type = Type;
            this.State = State;
            this.PickupDetails = PickupDetails;
            this.ShipmentDetails = ShipmentDetails;
        }
        
        /// <summary>
        /// Unique ID that identifies the fulfillment only within this order.
        /// </summary>
        /// <value>Unique ID that identifies the fulfillment only within this order.</value>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }
        /// <summary>
        /// The type of the fulfillment. See [OrderFulfillmentType](#type-orderfulfillmenttype) for possible values
        /// </summary>
        /// <value>The type of the fulfillment. See [OrderFulfillmentType](#type-orderfulfillmenttype) for possible values</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// The state of the fulfillment. See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values
        /// </summary>
        /// <value>The state of the fulfillment. See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }
        /// <summary>
        /// Contains details for a pickup fulfillment. Required when fulfillment type is &#x60;PICKUP&#x60;.
        /// </summary>
        /// <value>Contains details for a pickup fulfillment. Required when fulfillment type is &#x60;PICKUP&#x60;.</value>
        [DataMember(Name="pickup_details", EmitDefaultValue=false)]
        public OrderFulfillmentPickupDetails PickupDetails { get; set; }
        /// <summary>
        /// Contains details for a shipment fulfillment. Required when fulfillment type is &#x60;SHIPMENT&#x60;.  A shipment fulfillment&#39;s relationship to fulfillment &#x60;state&#x60;: &#x60;PROPOSED&#x60;: A shipment is requested. &#x60;RESERVED&#x60;: Fulfillment accepted. Shipment processing. &#x60;PREPARED&#x60;: Shipment packaged. Shipping label created. &#x60;COMPLETED&#x60;: Package has been shipped. &#x60;CANCELED&#x60;: Shipment has been canceled. &#x60;FAILED&#x60;: Shipment has failed.
        /// </summary>
        /// <value>Contains details for a shipment fulfillment. Required when fulfillment type is &#x60;SHIPMENT&#x60;.  A shipment fulfillment&#39;s relationship to fulfillment &#x60;state&#x60;: &#x60;PROPOSED&#x60;: A shipment is requested. &#x60;RESERVED&#x60;: Fulfillment accepted. Shipment processing. &#x60;PREPARED&#x60;: Shipment packaged. Shipping label created. &#x60;COMPLETED&#x60;: Package has been shipped. &#x60;CANCELED&#x60;: Shipment has been canceled. &#x60;FAILED&#x60;: Shipment has failed.</value>
        [DataMember(Name="shipment_details", EmitDefaultValue=false)]
        public OrderFulfillmentShipmentDetails ShipmentDetails { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderFulfillment {\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  PickupDetails: ").Append(PickupDetails).Append("\n");
            sb.Append("  ShipmentDetails: ").Append(ShipmentDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderFulfillment);
        }

        /// <summary>
        /// Returns true if OrderFulfillment instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderFulfillment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderFulfillment other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Uid == other.Uid ||
                    this.Uid != null &&
                    this.Uid.Equals(other.Uid)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.PickupDetails == other.PickupDetails ||
                    this.PickupDetails != null &&
                    this.PickupDetails.Equals(other.PickupDetails)
                ) && 
                (
                    this.ShipmentDetails == other.ShipmentDetails ||
                    this.ShipmentDetails != null &&
                    this.ShipmentDetails.Equals(other.ShipmentDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Uid != null)
                    hash = hash * 59 + this.Uid.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.PickupDetails != null)
                    hash = hash * 59 + this.PickupDetails.GetHashCode();
                if (this.ShipmentDetails != null)
                    hash = hash * 59 + this.ShipmentDetails.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Uid (string) maxLength
            if(this.Uid != null && this.Uid.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Uid, length must be less than 60.", new [] { "Uid" });
            }

            yield break;
        }
    }

}
