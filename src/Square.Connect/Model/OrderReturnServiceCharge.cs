/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// The service charge applied to the original order.
    /// </summary>
    [DataContract]
    public partial class OrderReturnServiceCharge :  IEquatable<OrderReturnServiceCharge>, IValidatableObject
    {
        /// <summary>
        /// The calculation phase after which to apply the service charge.  This field is read-only. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values
        /// </summary>
        /// <value>The calculation phase after which to apply the service charge.  This field is read-only. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CalculationPhaseEnum
        {
            
            /// <summary>
            /// Enum SUBTOTALPHASE for "SUBTOTAL_PHASE"
            /// </summary>
            [EnumMember(Value = "SUBTOTAL_PHASE")]
            SUBTOTALPHASE,
            
            /// <summary>
            /// Enum TOTALPHASE for "TOTAL_PHASE"
            /// </summary>
            [EnumMember(Value = "TOTAL_PHASE")]
            TOTALPHASE
        }

        /// <summary>
        /// The calculation phase after which to apply the service charge.  This field is read-only. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values
        /// </summary>
        /// <value>The calculation phase after which to apply the service charge.  This field is read-only. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values</value>
        [DataMember(Name="calculation_phase", EmitDefaultValue=false)]
        public CalculationPhaseEnum? CalculationPhase { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderReturnServiceCharge" /> class.
        /// </summary>
        /// <param name="Uid">Unique ID that identifies the return service charge only within this order.  This field is read-only..</param>
        /// <param name="SourceServiceChargeUid">&#x60;uid&#x60; of the Service Charge from the Order which contains the original charge of this service charge, null for unlinked returns..</param>
        /// <param name="Name">The name of the service charge..</param>
        /// <param name="CatalogObjectId">The ID referencing the service charge [CatalogObject](#type-catalogobject).</param>
        /// <param name="Percentage">The percentage of the service charge, as a string representation of a decimal number.  A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%.  Exactly one of percentage or amount_money should be set..</param>
        /// <param name="AmountMoney">The amount of a non-percentage based service charge.  Exactly one of percentage or amount_money should be set..</param>
        /// <param name="AppliedMoney">The amount of money applied to the order by the service charge, as calculated by the server.  For fixed-amount service charges, &#x60;applied_money&#x60; is equal to &#x60;amount_money&#x60;.  For percentage-based service charges, &#x60;applied_money&#x60; is the money calculated using the percentage. The &#x60;applied_money&#x60; field will include any inclusive tax amounts as well.  This field is read-only..</param>
        /// <param name="TotalMoney">The total amount of money to collect for the service charge.  Note that &#x60;total_money&#x60; does not equal &#x60;applied_money&#x60; plus &#x60;total_tax_money&#x60; if an inclusive tax is applied to the service charge since the inclusive tax amount will be included in both &#x60;applied_money&#x60; and &#x60;total_tax_money&#x60;.  This field is read-only..</param>
        /// <param name="TotalTaxMoney">The total amount of tax money to collect for the service charge.  This field is read-only..</param>
        /// <param name="CalculationPhase">The calculation phase after which to apply the service charge.  This field is read-only. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values.</param>
        /// <param name="Taxable">Indicates whether the surcharge can be taxed. Service charges calculated in the &#x60;TOTAL_PHASE&#x60; cannot be marked as taxable..</param>
        /// <param name="ReturnTaxes">The taxes which apply to the service charge. Return-level taxes apply by default to service charge calculated in the &#x60;SUBTOTAL_PHASE&#x60; if the service charge is marked as taxable..</param>
        public OrderReturnServiceCharge(string Uid = default(string), string SourceServiceChargeUid = default(string), string Name = default(string), string CatalogObjectId = default(string), string Percentage = default(string), Money AmountMoney = default(Money), Money AppliedMoney = default(Money), Money TotalMoney = default(Money), Money TotalTaxMoney = default(Money), CalculationPhaseEnum? CalculationPhase = default(CalculationPhaseEnum?), bool? Taxable = default(bool?), List<OrderReturnTax> ReturnTaxes = default(List<OrderReturnTax>))
        {
            this.Uid = Uid;
            this.SourceServiceChargeUid = SourceServiceChargeUid;
            this.Name = Name;
            this.CatalogObjectId = CatalogObjectId;
            this.Percentage = Percentage;
            this.AmountMoney = AmountMoney;
            this.AppliedMoney = AppliedMoney;
            this.TotalMoney = TotalMoney;
            this.TotalTaxMoney = TotalTaxMoney;
            this.CalculationPhase = CalculationPhase;
            this.Taxable = Taxable;
            this.ReturnTaxes = ReturnTaxes;
        }
        
        /// <summary>
        /// Unique ID that identifies the return service charge only within this order.  This field is read-only.
        /// </summary>
        /// <value>Unique ID that identifies the return service charge only within this order.  This field is read-only.</value>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }
        /// <summary>
        /// &#x60;uid&#x60; of the Service Charge from the Order which contains the original charge of this service charge, null for unlinked returns.
        /// </summary>
        /// <value>&#x60;uid&#x60; of the Service Charge from the Order which contains the original charge of this service charge, null for unlinked returns.</value>
        [DataMember(Name="source_service_charge_uid", EmitDefaultValue=false)]
        public string SourceServiceChargeUid { get; set; }
        /// <summary>
        /// The name of the service charge.
        /// </summary>
        /// <value>The name of the service charge.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// The ID referencing the service charge [CatalogObject](#type-catalogobject)
        /// </summary>
        /// <value>The ID referencing the service charge [CatalogObject](#type-catalogobject)</value>
        [DataMember(Name="catalog_object_id", EmitDefaultValue=false)]
        public string CatalogObjectId { get; set; }
        /// <summary>
        /// The percentage of the service charge, as a string representation of a decimal number.  A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%.  Exactly one of percentage or amount_money should be set.
        /// </summary>
        /// <value>The percentage of the service charge, as a string representation of a decimal number.  A value of &#x60;7.25&#x60; corresponds to a percentage of 7.25%.  Exactly one of percentage or amount_money should be set.</value>
        [DataMember(Name="percentage", EmitDefaultValue=false)]
        public string Percentage { get; set; }
        /// <summary>
        /// The amount of a non-percentage based service charge.  Exactly one of percentage or amount_money should be set.
        /// </summary>
        /// <value>The amount of a non-percentage based service charge.  Exactly one of percentage or amount_money should be set.</value>
        [DataMember(Name="amount_money", EmitDefaultValue=false)]
        public Money AmountMoney { get; set; }
        /// <summary>
        /// The amount of money applied to the order by the service charge, as calculated by the server.  For fixed-amount service charges, &#x60;applied_money&#x60; is equal to &#x60;amount_money&#x60;.  For percentage-based service charges, &#x60;applied_money&#x60; is the money calculated using the percentage. The &#x60;applied_money&#x60; field will include any inclusive tax amounts as well.  This field is read-only.
        /// </summary>
        /// <value>The amount of money applied to the order by the service charge, as calculated by the server.  For fixed-amount service charges, &#x60;applied_money&#x60; is equal to &#x60;amount_money&#x60;.  For percentage-based service charges, &#x60;applied_money&#x60; is the money calculated using the percentage. The &#x60;applied_money&#x60; field will include any inclusive tax amounts as well.  This field is read-only.</value>
        [DataMember(Name="applied_money", EmitDefaultValue=false)]
        public Money AppliedMoney { get; set; }
        /// <summary>
        /// The total amount of money to collect for the service charge.  Note that &#x60;total_money&#x60; does not equal &#x60;applied_money&#x60; plus &#x60;total_tax_money&#x60; if an inclusive tax is applied to the service charge since the inclusive tax amount will be included in both &#x60;applied_money&#x60; and &#x60;total_tax_money&#x60;.  This field is read-only.
        /// </summary>
        /// <value>The total amount of money to collect for the service charge.  Note that &#x60;total_money&#x60; does not equal &#x60;applied_money&#x60; plus &#x60;total_tax_money&#x60; if an inclusive tax is applied to the service charge since the inclusive tax amount will be included in both &#x60;applied_money&#x60; and &#x60;total_tax_money&#x60;.  This field is read-only.</value>
        [DataMember(Name="total_money", EmitDefaultValue=false)]
        public Money TotalMoney { get; set; }
        /// <summary>
        /// The total amount of tax money to collect for the service charge.  This field is read-only.
        /// </summary>
        /// <value>The total amount of tax money to collect for the service charge.  This field is read-only.</value>
        [DataMember(Name="total_tax_money", EmitDefaultValue=false)]
        public Money TotalTaxMoney { get; set; }
        /// <summary>
        /// Indicates whether the surcharge can be taxed. Service charges calculated in the &#x60;TOTAL_PHASE&#x60; cannot be marked as taxable.
        /// </summary>
        /// <value>Indicates whether the surcharge can be taxed. Service charges calculated in the &#x60;TOTAL_PHASE&#x60; cannot be marked as taxable.</value>
        [DataMember(Name="taxable", EmitDefaultValue=false)]
        public bool? Taxable { get; set; }
        /// <summary>
        /// The taxes which apply to the service charge. Return-level taxes apply by default to service charge calculated in the &#x60;SUBTOTAL_PHASE&#x60; if the service charge is marked as taxable.
        /// </summary>
        /// <value>The taxes which apply to the service charge. Return-level taxes apply by default to service charge calculated in the &#x60;SUBTOTAL_PHASE&#x60; if the service charge is marked as taxable.</value>
        [DataMember(Name="return_taxes", EmitDefaultValue=false)]
        public List<OrderReturnTax> ReturnTaxes { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderReturnServiceCharge {\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  SourceServiceChargeUid: ").Append(SourceServiceChargeUid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CatalogObjectId: ").Append(CatalogObjectId).Append("\n");
            sb.Append("  Percentage: ").Append(Percentage).Append("\n");
            sb.Append("  AmountMoney: ").Append(AmountMoney).Append("\n");
            sb.Append("  AppliedMoney: ").Append(AppliedMoney).Append("\n");
            sb.Append("  TotalMoney: ").Append(TotalMoney).Append("\n");
            sb.Append("  TotalTaxMoney: ").Append(TotalTaxMoney).Append("\n");
            sb.Append("  CalculationPhase: ").Append(CalculationPhase).Append("\n");
            sb.Append("  Taxable: ").Append(Taxable).Append("\n");
            sb.Append("  ReturnTaxes: ").Append(ReturnTaxes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OrderReturnServiceCharge);
        }

        /// <summary>
        /// Returns true if OrderReturnServiceCharge instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderReturnServiceCharge to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderReturnServiceCharge other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Uid == other.Uid ||
                    this.Uid != null &&
                    this.Uid.Equals(other.Uid)
                ) && 
                (
                    this.SourceServiceChargeUid == other.SourceServiceChargeUid ||
                    this.SourceServiceChargeUid != null &&
                    this.SourceServiceChargeUid.Equals(other.SourceServiceChargeUid)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.CatalogObjectId == other.CatalogObjectId ||
                    this.CatalogObjectId != null &&
                    this.CatalogObjectId.Equals(other.CatalogObjectId)
                ) && 
                (
                    this.Percentage == other.Percentage ||
                    this.Percentage != null &&
                    this.Percentage.Equals(other.Percentage)
                ) && 
                (
                    this.AmountMoney == other.AmountMoney ||
                    this.AmountMoney != null &&
                    this.AmountMoney.Equals(other.AmountMoney)
                ) && 
                (
                    this.AppliedMoney == other.AppliedMoney ||
                    this.AppliedMoney != null &&
                    this.AppliedMoney.Equals(other.AppliedMoney)
                ) && 
                (
                    this.TotalMoney == other.TotalMoney ||
                    this.TotalMoney != null &&
                    this.TotalMoney.Equals(other.TotalMoney)
                ) && 
                (
                    this.TotalTaxMoney == other.TotalTaxMoney ||
                    this.TotalTaxMoney != null &&
                    this.TotalTaxMoney.Equals(other.TotalTaxMoney)
                ) && 
                (
                    this.CalculationPhase == other.CalculationPhase ||
                    this.CalculationPhase != null &&
                    this.CalculationPhase.Equals(other.CalculationPhase)
                ) && 
                (
                    this.Taxable == other.Taxable ||
                    this.Taxable != null &&
                    this.Taxable.Equals(other.Taxable)
                ) && 
                (
                    this.ReturnTaxes == other.ReturnTaxes ||
                    this.ReturnTaxes != null &&
                    this.ReturnTaxes.SequenceEqual(other.ReturnTaxes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Uid != null)
                    hash = hash * 59 + this.Uid.GetHashCode();
                if (this.SourceServiceChargeUid != null)
                    hash = hash * 59 + this.SourceServiceChargeUid.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.CatalogObjectId != null)
                    hash = hash * 59 + this.CatalogObjectId.GetHashCode();
                if (this.Percentage != null)
                    hash = hash * 59 + this.Percentage.GetHashCode();
                if (this.AmountMoney != null)
                    hash = hash * 59 + this.AmountMoney.GetHashCode();
                if (this.AppliedMoney != null)
                    hash = hash * 59 + this.AppliedMoney.GetHashCode();
                if (this.TotalMoney != null)
                    hash = hash * 59 + this.TotalMoney.GetHashCode();
                if (this.TotalTaxMoney != null)
                    hash = hash * 59 + this.TotalTaxMoney.GetHashCode();
                if (this.CalculationPhase != null)
                    hash = hash * 59 + this.CalculationPhase.GetHashCode();
                if (this.Taxable != null)
                    hash = hash * 59 + this.Taxable.GetHashCode();
                if (this.ReturnTaxes != null)
                    hash = hash * 59 + this.ReturnTaxes.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Uid (string) maxLength
            if(this.Uid != null && this.Uid.Length > 60)
            {
                yield return new ValidationResult("Invalid value for Uid, length must be less than 60.", new [] { "Uid" });
            }

            // SourceServiceChargeUid (string) maxLength
            if(this.SourceServiceChargeUid != null && this.SourceServiceChargeUid.Length > 60)
            {
                yield return new ValidationResult("Invalid value for SourceServiceChargeUid, length must be less than 60.", new [] { "SourceServiceChargeUid" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 255)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // CatalogObjectId (string) maxLength
            if(this.CatalogObjectId != null && this.CatalogObjectId.Length > 192)
            {
                yield return new ValidationResult("Invalid value for CatalogObjectId, length must be less than 192.", new [] { "CatalogObjectId" });
            }

            // Percentage (string) maxLength
            if(this.Percentage != null && this.Percentage.Length > 10)
            {
                yield return new ValidationResult("Invalid value for Percentage, length must be less than 10.", new [] { "Percentage" });
            }

            yield break;
        }
    }

}
