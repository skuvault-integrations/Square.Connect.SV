/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace Square.Connect.Model
{
    /// <summary>
    /// Defines the fields that are included in the response body of a request to the BatchRetrieveOrders endpoint.
    /// </summary>
    [DataContract]
    public partial class BatchRetrieveOrdersResponse :  IEquatable<BatchRetrieveOrdersResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchRetrieveOrdersResponse" /> class.
        /// </summary>
        /// <param name="Orders">The requested orders. This will omit any requested orders that do not exist or are not charged..</param>
        /// <param name="Errors">Any errors that occurred during the request..</param>
        /// <param name="UnconvertibleTransactionIds">List of transaction ids within the requested set of ids that encountered transformation issues when being converted to an Order..</param>
        public BatchRetrieveOrdersResponse(List<Order> Orders = default(List<Order>), List<Error> Errors = default(List<Error>), List<string> UnconvertibleTransactionIds = default(List<string>))
        {
            this.Orders = Orders;
            this.Errors = Errors;
            this.UnconvertibleTransactionIds = UnconvertibleTransactionIds;
        }
        
        /// <summary>
        /// The requested orders. This will omit any requested orders that do not exist or are not charged.
        /// </summary>
        /// <value>The requested orders. This will omit any requested orders that do not exist or are not charged.</value>
        [DataMember(Name="orders", EmitDefaultValue=false)]
        public List<Order> Orders { get; set; }
        /// <summary>
        /// Any errors that occurred during the request.
        /// </summary>
        /// <value>Any errors that occurred during the request.</value>
        [DataMember(Name="errors", EmitDefaultValue=false)]
        public List<Error> Errors { get; set; }
        /// <summary>
        /// List of transaction ids within the requested set of ids that encountered transformation issues when being converted to an Order.
        /// </summary>
        /// <value>List of transaction ids within the requested set of ids that encountered transformation issues when being converted to an Order.</value>
        [DataMember(Name="unconvertible_transaction_ids", EmitDefaultValue=false)]
        public List<string> UnconvertibleTransactionIds { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatchRetrieveOrdersResponse {\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  UnconvertibleTransactionIds: ").Append(UnconvertibleTransactionIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BatchRetrieveOrdersResponse);
        }

        /// <summary>
        /// Returns true if BatchRetrieveOrdersResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of BatchRetrieveOrdersResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchRetrieveOrdersResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Orders == other.Orders ||
                    this.Orders != null &&
                    this.Orders.SequenceEqual(other.Orders)
                ) && 
                (
                    this.Errors == other.Errors ||
                    this.Errors != null &&
                    this.Errors.SequenceEqual(other.Errors)
                ) && 
                (
                    this.UnconvertibleTransactionIds == other.UnconvertibleTransactionIds ||
                    this.UnconvertibleTransactionIds != null &&
                    this.UnconvertibleTransactionIds.SequenceEqual(other.UnconvertibleTransactionIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Orders != null)
                    hash = hash * 59 + this.Orders.GetHashCode();
                if (this.Errors != null)
                    hash = hash * 59 + this.Errors.GetHashCode();
                if (this.UnconvertibleTransactionIds != null)
                    hash = hash * 59 + this.UnconvertibleTransactionIds.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
