/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Square.Connect.Api;
using Square.Connect.Model;
using Square.Connect.Client;
using System.Reflection;

namespace Square.Connect.Test
{
    /// <summary>
    ///  Class for testing Refund
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class RefundTests
    {
        private Refund instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new Refund(
                Id: Guid.NewGuid().ToString(),
                LocationId: Guid.NewGuid().ToString(),
                TransactionId: Guid.NewGuid().ToString(),
                TenderId: Guid.NewGuid().ToString(),
                Reason: "",
                AmountMoney: new Money(1, "USD"),
                Status: "APPROVED"
            );// TODO uncomment below to create an instance of Refund
            //instance = new Refund();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Refund
        /// </summary>
        [Test]
        public void RefundInstanceTest()
        {
            Assert.IsInstanceOf<Refund> (instance, "variable 'instance' is a Refund");
        }

        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Test]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'LocationId'
        /// </summary>
        [Test]
        public void LocationIdTest()
        {
            // TODO unit test for the property 'LocationId'
        }
        /// <summary>
        /// Test the property 'TransactionId'
        /// </summary>
        [Test]
        public void TransactionIdTest()
        {
            // TODO unit test for the property 'TransactionId'
        }
        /// <summary>
        /// Test the property 'TenderId'
        /// </summary>
        [Test]
        public void TenderIdTest()
        {
            // TODO unit test for the property 'TenderId'
        }
        /// <summary>
        /// Test the property 'CreatedAt'
        /// </summary>
        [Test]
        public void CreatedAtTest()
        {
            // TODO unit test for the property 'CreatedAt'
        }
        /// <summary>
        /// Test the property 'Reason'
        /// </summary>
        [Test]
        public void ReasonTest()
        {
            // TODO unit test for the property 'Reason'
        }
        /// <summary>
        /// Test the property 'AmountMoney'
        /// </summary>
        [Test]
        public void AmountMoneyTest()
        {
            // TODO unit test for the property 'AmountMoney'
        }
        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Test]
        public void StatusTest()
        {
            // TODO unit test for the property 'Status'
        }
        /// <summary>
        /// Test the property 'ProcessingFeeMoney'
        /// </summary>
        [Test]
        public void ProcessingFeeMoneyTest()
        {
            // TODO unit test for the property 'ProcessingFeeMoney'
        }
        /// <summary>
        /// Test the property 'AdditionalRecipients'
        /// </summary>
        [Test]
        public void AdditionalRecipientsTest()
        {
            Assert.DoesNotThrow(() => instance.AdditionalRecipients = new List<AdditionalRecipient>(){
                new AdditionalRecipient(
                    "location",
                    "description",
                    new Money(1, "USD")
                )
            });
        }

    }

}
