/*
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Square.Connect.Client;
using Square.Connect.Api;
using Square.Connect.Model;

namespace Square.Connect.Test
{
	/// <summary>
	///  Class for testing OrdersApi
	/// </summary>
	/// <remarks>
	/// This file is automatically generated by Swagger Codegen.
	/// Please update the test case below to test the API endpoint.
	/// </remarks>
	[TestFixture]
	public class OrdersApiTests
	{
		private TestAccounts testAccounts;
		private OrdersApi instance;
		private string locationId;

		/// <summary>
		/// Setup before each unit test
		/// </summary>
		[SetUp]
		public void Init()
		{
			instance = new OrdersApi();
			testAccounts = new TestAccounts();
			var testAccount = testAccounts["US-Prod"];
			locationId = testAccount.LocationId;
			Configuration.Default.AccessToken = testAccount.AccessToken;
		}

		/// <summary>
		/// Clean up after each unit test
		/// </summary>
		[TearDown]
		public void Cleanup()
		{

		}

		/// <summary>
		/// Test an instance of OrdersApi
		/// </summary>
		[Test]
		public void InstanceTest()
		{
			Assert.IsInstanceOf(typeof(OrdersApi), instance, "instance is a CheckoutApi");
		}

		/// <summary>
		/// Test CreateOrder
		/// </summary>
		[Test]
		public void CreateOrderTest_CustomItems()
		{
			const string referenceId = "reference_id";

			CreateOrderRequest request = new CreateOrderRequest(
				IdempotencyKey: Guid.NewGuid().ToString(),
				ReferenceId: referenceId,
				LineItems: new List<CreateOrderRequestLineItem>() {
						new CreateOrderRequestLineItem(
							Name: "Printed T Shirt",
							Quantity: "2",
							BasePriceMoney: new Money(Amount: 1500, Currency: "USD"),
							Discounts: new List<CreateOrderRequestDiscount>() {
								new CreateOrderRequestDiscount(
									Name: "7% off previous season item",
									Percentage: "7"
								),
								new CreateOrderRequestDiscount(
									Name: "$3 off Customer Discount",
									AmountMoney: new Money(300, "USD")
								)
							}
						),
						new CreateOrderRequestLineItem(
							Name: "Slim Jeans",
							Quantity: "1",
							BasePriceMoney: new Money(Amount: 2500, Currency: "USD")
						),
						new CreateOrderRequestLineItem(
							Name: "Woven Sweater",
							Quantity: "3",
							BasePriceMoney: new Money(Amount: 3500, Currency: "USD"),
							Discounts: new List<CreateOrderRequestDiscount>() {
								new CreateOrderRequestDiscount(
									Name: "$11 off Customer Discount",
									AmountMoney: new Money(1100, "USD")
								)
							},
							Taxes: new List<CreateOrderRequestTax>() {
								new CreateOrderRequestTax(
									Name: "Fair Trade Tax",
									Percentage: "5"
								)
							}
						)
					},
				Discounts: new List<CreateOrderRequestDiscount>() {
					new CreateOrderRequestDiscount(
						Name: "Father's day 12% OFF",
						Percentage: "12"
					),
					new CreateOrderRequestDiscount(
						Name: "Global Sales $55 OFF",
						AmountMoney: new Money(5500, "USD")
					)
				},
				Taxes: new List<CreateOrderRequestTax>() {
					new CreateOrderRequestTax(
						Name: "Sales Tax",
						Percentage: "8.5"
					)
				}
			);

			CreateOrderResponse response = instance.CreateOrder(locationId, request);
			Assert.IsNull(response.Errors);

			Order actual = response.Order;
			Assert.IsNotNull(actual);
			Assert.AreEqual(request.ReferenceId, actual.ReferenceId);
			Assert.AreEqual(locationId, actual.LocationId);
			Assert.AreEqual(3, actual.LineItems.Count);
			Assert.AreEqual(7818, actual.TotalMoney.Amount);
			Assert.AreEqual("USD", actual.TotalMoney.Currency);
			Assert.AreEqual(823, actual.TotalTaxMoney.Amount);
			Assert.AreEqual("USD", actual.TotalTaxMoney.Currency);
			Assert.AreEqual(9005, actual.TotalDiscountMoney.Amount);
			Assert.AreEqual("USD", actual.TotalDiscountMoney.Currency);
		}
	}
}
