/*
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Square.Connect.Client;
using Square.Connect.Api;
using Square.Connect.Model;

namespace Square.Connect.Test
{
    /// <summary>
    ///  Class for testing CheckoutApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CheckoutApiTests
    {
        private TestAccounts testAccounts;
        private CheckoutApi instance;
        private string locationId;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CheckoutApi();
            testAccounts = new TestAccounts();
            var testAccount = testAccounts["US-Prod-Sandbox"];
            locationId = testAccount.LocationId;
            Configuration.Default.AccessToken = testAccount.AccessToken;
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CheckoutApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf(typeof(CheckoutApi), instance, "instance is a CheckoutApi");
        }

        /// <summary>
        /// Test CreateCheckout
        /// </summary>
        [Test]
        public void CreateCheckoutTest()
        {

            CreateCheckoutRequest body = new CreateCheckoutRequest(
                IdempotencyKey: Guid.NewGuid().ToString(),
                Order: new CreateOrderRequest(
                    ReferenceId: "reference_id",
                    LineItems: new List<CreateOrderRequestLineItem>() {
                        new CreateOrderRequestLineItem(
                            Name: "Printed T Shirt",
                            Quantity: "2",
                            BasePriceMoney: new Money(Amount: 1500, Currency: "USD"),
                            Discounts: new List<CreateOrderRequestDiscount>() {
                                new CreateOrderRequestDiscount(
                                    Name: "7% off previous season item",
                                    Percentage: "7"
                                ),
                                new CreateOrderRequestDiscount(
                                    Name: "$3 off Customer Discount",
                                    AmountMoney: new Money(300, "USD")
                                )
                            }
                        ),
                        new CreateOrderRequestLineItem(
                            Name: "Slim Jeans",
                            Quantity: "1",
                            BasePriceMoney: new Money(Amount: 2500, Currency: "USD")
                        ),
                        new CreateOrderRequestLineItem(
                            Name: "Woven Sweater",
                            Quantity: "3",
                            BasePriceMoney: new Money(Amount: 3500, Currency: "USD"),
                            Discounts: new List<CreateOrderRequestDiscount>() {
                                new CreateOrderRequestDiscount(
                                    Name: "$11 off Customer Discount",
                                    AmountMoney: new Money(1100, "USD")
                                )
                            },
                            Taxes: new List<CreateOrderRequestTax>() {
                                new CreateOrderRequestTax(
                                    Name: "Fair Trade Tax",
                                    Percentage: "5"
                                )
                            }
                        )
                    },
                    Discounts: new List<CreateOrderRequestDiscount>() {
                        new CreateOrderRequestDiscount(
                            Name: "Father's day 12% OFF",
                            Percentage: "12"
                        ),
                        new CreateOrderRequestDiscount(
                            Name: "Global Sales $55 OFF",
                            AmountMoney: new Money(5500, "USD")
                        )
                    },
                    Taxes: new List<CreateOrderRequestTax>() {
                        new CreateOrderRequestTax(
                            Name: "Sales Tax",
                            Percentage: "8.5"
                        )
                    }
                ),
                AskForShippingAddress: true,
                MerchantSupportEmail: "merchant+support@website.com",
                PrePopulateBuyerEmail: "example@email.com",
                PrePopulateShippingAddress: new Address(
                    AddressLine1: "1455 Market St.",
                    AddressLine2: "Suite 600",
                    Locality: "San Francisco",
                    AdministrativeDistrictLevel1: "CA",
                    PostalCode: "94103",
                    Country: "US",
                    FirstName: "Jane",
                    LastName: "Doe"
                ),
                RedirectUrl: "https://docs.connect.squareup.com/order-confirm"
            );
            var response = instance.CreateCheckout(locationId, body);
            Assert.IsInstanceOf<CreateCheckoutResponse> (response, "response is CreateCheckoutResponse");
            Assert.IsNull(response.Errors);
            Assert.True(response.Checkout.CheckoutPageUrl.StartsWith("https://connect.", StringComparison.Ordinal));
        }
    }

}
