/* 
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Square.Connect.Client;
using Square.Connect.Api;
using Square.Connect.Model;

namespace Square.Connect.Test
{
    /// <summary>
    ///  Class for testing PaymentsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PaymentsApiTests
    {
        private PaymentsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PaymentsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PaymentsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PaymentsApi
            //Assert.IsInstanceOfType(typeof(PaymentsApi), instance, "instance is a PaymentsApi");
        }

        
        /// <summary>
        /// Test CancelPayment
        /// </summary>
        [Test]
        public void CancelPaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentId = null;
            //var response = instance.CancelPayment(paymentId);
            //Assert.IsInstanceOf<CancelPaymentResponse> (response, "response is CancelPaymentResponse");
        }
        
        /// <summary>
        /// Test CancelPaymentByIdempotencyKey
        /// </summary>
        [Test]
        public void CancelPaymentByIdempotencyKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CancelPaymentByIdempotencyKeyRequest body = null;
            //var response = instance.CancelPaymentByIdempotencyKey(body);
            //Assert.IsInstanceOf<CancelPaymentByIdempotencyKeyResponse> (response, "response is CancelPaymentByIdempotencyKeyResponse");
        }
        
        /// <summary>
        /// Test CompletePayment
        /// </summary>
        [Test]
        public void CompletePaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentId = null;
            //var response = instance.CompletePayment(paymentId);
            //Assert.IsInstanceOf<CompletePaymentResponse> (response, "response is CompletePaymentResponse");
        }
        
        /// <summary>
        /// Test CreatePayment
        /// </summary>
        [Test]
        public void CreatePaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreatePaymentRequest body = null;
            //var response = instance.CreatePayment(body);
            //Assert.IsInstanceOf<CreatePaymentResponse> (response, "response is CreatePaymentResponse");
        }
        
        /// <summary>
        /// Test GetPayment
        /// </summary>
        [Test]
        public void GetPaymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string paymentId = null;
            //var response = instance.GetPayment(paymentId);
            //Assert.IsInstanceOf<GetPaymentResponse> (response, "response is GetPaymentResponse");
        }
        
        /// <summary>
        /// Test ListPayments
        /// </summary>
        [Test]
        public void ListPaymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string beginTime = null;
            //string endTime = null;
            //string sortOrder = null;
            //string cursor = null;
            //string locationId = null;
            //long? total = null;
            //string last4 = null;
            //string cardBrand = null;
            //var response = instance.ListPayments(beginTime, endTime, sortOrder, cursor, locationId, total, last4, cardBrand);
            //Assert.IsInstanceOf<ListPaymentsResponse> (response, "response is ListPaymentsResponse");
        }
        
    }

}
